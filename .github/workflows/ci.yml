name: CI - Build, Test and Release

on:
  push:
    branches: [ "ci_test", "main" ]
    tags:
      - 'v*' # Запускать сборку для тегов версий (v1.0.0, v2.1.0 и т.д.)
  pull_request:
    branches: [ "ci_test", "main" ]
  workflow_dispatch:

permissions:
  contents: write  # Необходимо для создания релизов
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Получить код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Получить всю историю для тегов

      # Шаг 2: Установить компилятор, make и утилиты для анализа кода
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y clang-tidy clang-format

      # Шаг 3: Создать правильный Makefile для папки src
      - name: Create Makefile for src directory
        run: |
          cat > Makefile << 'EOF'
          # ==============================================================================
          # Makefile для C++ проекта (файлы в src/)
          # ==============================================================================

          TARGET = rpn_calculator
          SRC_DIR = src
          BUILD_DIR = build

          # Исходные файлы в папке src
          SOURCES = $(SRC_DIR)/main.cpp $(SRC_DIR)/rpn.cpp
          OBJECTS = $(SOURCES:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)

          # Компилятор и флаги
          CXX = g++
          CXX_STANDARD = c++17
          CXXFLAGS_BASE = -std=$(CXX_STANDARD) -Wall -Wextra -Wpedantic -I$(SRC_DIR)

          # Конфигурации сборки
          CXXFLAGS_DEBUG = $(CXXFLAGS_BASE) -g -O0
          CXXFLAGS_RELEASE = $(CXXFLAGS_BASE) -O3 -DNDEBUG

          .DEFAULT_GOAL := debug

          debug: CXXFLAGS = $(CXXFLAGS_DEBUG)
          debug: $(BUILD_DIR)/$(TARGET)

          release: CXXFLAGS = $(CXXFLAGS_RELEASE)
          release: $(BUILD_DIR)/$(TARGET)

          $(BUILD_DIR)/$(TARGET): $(OBJECTS)
          	$(CXX) $(OBJECTS) -o $@
          	@echo "✅ Сборка завершена: $@"

          $(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp | $(BUILD_DIR)
          	@mkdir -p $(@D)
          	$(CXX) $(CXXFLAGS) -c $< -o $@

          $(BUILD_DIR):
          	@mkdir -p $@

          clean:
          	rm -rf $(BUILD_DIR)
          	@echo "✅ Очистка завершена"

          run: debug
          	./$(BUILD_DIR)/$(TARGET) input.txt output.txt

          .PHONY: all debug release clean run
          EOF
          
          echo "✅ Makefile создан для папки src/"

      # Шаг 4: Проверить наличие исходных файлов
      - name: Verify source files exist
        run: |
          if [ ! -f "src/main.cpp" ]; then
            echo "❌ Файл src/main.cpp не найден"
            exit 1
          fi
          if [ ! -f "src/rpn.cpp" ]; then
            echo "❌ Файл src/rpn.cpp не найден"
            exit 1
          fi
          if [ ! -f "src/rpn.hpp" ]; then
            echo "❌ Файл src/rpn.hpp не найден"
            exit 1
          fi
          echo "✅ Все исходные файлы найдены в папке src/"

      # Шаг 5: Собрать проект с помощью Makefile
      - name: Build project
        run: make release

      # Шаг 6: Запустить линтер (проверка стиля кода)
      - name: Run clang-tidy linter
        run: |
          find src/ -name "*.cpp" -o -name "*.hpp" | xargs clang-tidy --quiet -checks=bugprone-*,clang-analyzer-*,performance-*,portability-*,readability-* -- -Isrc
          echo "✅ Lint проверка пройдена"

      # Шаг 7: Запустить программу с тестовыми данными
      - name: Test application
        run: |
          # Создаем тестовый файл
          cat > input.txt << 'EOF'
          3 2 - 1 +
          2 12 6 / -
          5 1 2 + 4 * + 3 -
          EOF
          
          ./build/rpn_calculator input.txt output.txt
          echo "Результаты тестирования:"
          cat output.txt
          
          # Проверяем корректность результатов
          if ! grep -q "= 2" output.txt || ! grep -q "= 0" output.txt; then
            echo "❌ Тесты не прошли: некорректные результаты вычислений"
            exit 1
          fi
          echo "✅ Все тесты прошли успешно"

      # Шаг 8: Очистить артефакты сборки
      - name: Clean build artifacts
        run: make clean

      # Шаг 9: Проверить, что в репозитории нет артефактов сборки
      - name: Verify no build files in repository
        run: |
          if [ -d "build" ] || [ -f "*.o" ] || [ -f "rpn_calculator" ]; then
            echo "❌ ERROR: Build artifacts found in repository!"
            echo "Found files:"
            find . -name "*.o" -o -name "rpn_calculator" -o -name "build" | grep -v "./.git"
            exit 1
          fi
          echo "✅ Repository is clean - no build artifacts found"

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-test  # Запускать только после успешной сборки и тестов
    if: startsWith(github.ref, 'refs/tags/v')  # Только для тегов версий
    
    steps:
      # Шаг 1: Получить код
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Создать Makefile для папки src
      - name: Create Makefile for src directory
        run: |
          cat > Makefile << 'EOF'
          # ==============================================================================
          # Makefile для C++ проекта (файлы в src/)
          # ==============================================================================

          TARGET = rpn_calculator
          SRC_DIR = src
          BUILD_DIR = build

          # Исходные файлы в папке src
          SOURCES = $(SRC_DIR)/main.cpp $(SRC_DIR)/rpn.cpp
          OBJECTS = $(SOURCES:$(SRC_DIR)/%.cpp=$(BUILD_DIR)/%.o)

          # Компилятор и флаги
          CXX = g++
          CXX_STANDARD = c++17
          CXXFLAGS_BASE = -std=$(CXX_STANDARD) -Wall -Wextra -Wpedantic -I$(SRC_DIR)

          # Конфигурации сборки
          CXXFLAGS_DEBUG = $(CXXFLAGS_BASE) -g -O0
          CXXFLAGS_RELEASE = $(CXXFLAGS_BASE) -O3 -DNDEBUG

          .DEFAULT_GOAL := debug

          debug: CXXFLAGS = $(CXXFLAGS_DEBUG)
          debug: $(BUILD_DIR)/$(TARGET)

          release: CXXFLAGS = $(CXXFLAGS_RELEASE)
          release: $(BUILD_DIR)/$(TARGET)

          $(BUILD_DIR)/$(TARGET): $(OBJECTS)
          	$(CXX) $(OBJECTS) -o $@
          	@echo "✅ Сборка завершена: $@"

          $(BUILD_DIR)/%.o: $(SRC_DIR)/%.cpp | $(BUILD_DIR)
          	@mkdir -p $(@D)
          	$(CXX) $(CXXFLAGS) -c $< -o $@

          $(BUILD_DIR):
          	@mkdir -p $@

          clean:
          	rm -rf $(BUILD_DIR)
          	@echo "✅ Очистка завершена"

          run: debug
          	./$(BUILD_DIR)/$(TARGET) input.txt output.txt

          .PHONY: all debug release clean run
          EOF

      # Шаг 3: Установить инструменты для сборки
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      # Шаг 4: Собрать релизную версию
      - name: Build release version
        run: |
          make release
          # Проверяем что бинарник создан
          if [ ! -f "build/rpn_calculator" ]; then
            echo "❌ Исполняемый файл не был создан"
            exit 1
          fi
          echo "✅ Релизная сборка создана"

      # Шаг 5: Создать архив с релизом
      - name: Create release archive
        run: |
          # Создаем временную директорию для релиза
          mkdir -p release_package
          cp build/rpn_calculator release_package/
          cp LICENSE release_package/
          cp README.md release_package/
          cp input.txt release_package/
          
          # Создаем архив
          tar -czf rpn-calculator-${{ github.ref_name }}.tar.gz -C release_package .
          echo "✅ Архив релиза создан: rpn-calculator-${{ github.ref_name }}.tar.gz"

      # Шаг 6: Создать релиз на GitHub
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## RPN Calculator ${{ github.ref_name }}
            
            ### Что нового?
            - Реализован калькулятор обратной польской записи
            - Поддержка базовых арифметических операций
            - Обработка ошибок и валидация выражений
            - Пакетная обработка файлов
            
            ### Как использовать?
            ```bash
            ./rpn_calculator input.txt output.txt
            ```
            
            ### Системные требования
            - Linux с glibc 2.17+
            - Совместимость с x86_64 архитектурой
            
          files: |
            rpn-calculator-${{ github.ref_name }}.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Шаг 7: Очистка после создания релиза
      - name: Cleanup after release
        run: |
          make clean
          rm -rf release_package
          rm -f rpn-calculator-*.tar.gz
        if: always()

# Разрешаем параллельное выполнение jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
