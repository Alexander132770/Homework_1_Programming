name: CI - Build, Test and Release

on:
  push:
    branches: [ "ci_test", "main" ]
    tags:
      - 'v*' # Запускать сборку для тегов версий (v1.0.0, v2.1.0 и т.д.)
  pull_request:
    branches: [ "ci_test", "main" ]
  workflow_dispatch:

permissions:
  contents: write  # Необходимо для создания релизов
  pull-requests: write

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Получить код из репозитория
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Получить всю историю для тегов

      # Шаг 2: Установить компилятор, make и утилиты для анализа кода
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y clang-tidy clang-format

      # Шаг 3: Собрать проект с помощью Makefile
      - name: Build project
        run: make release

      # Шаг 4: Запустить линтер (проверка стиля кода)
      - name: Run clang-tidy linter
        run: make lint

      # Шаг 5: Запустить программу с тестовыми данными
      - name: Test application
        run: |
          # Создаем тестовый файл
          cat > test_input.txt << 'EOF'
          3 2 - 1 +
          2 12 6 / -
          5 1 2 + 4 * + 3 -
          EOF
          
          ./build/rpn_calculator test_input.txt test_output.txt
          echo "Результаты тестирования:"
          cat test_output.txt
          
          # Проверяем корректность результатов
          if ! grep -q "= 2" test_output.txt || ! grep -q "= 0" test_output.txt; then
            echo "Тесты не прошли: некорректные результаты вычислений"
            exit 1
          fi
          echo "Все тесты прошли успешно"

      # Шаг 6: Очистить артефакты сборки
      - name: Clean build artifacts
        run: make clean

      # Шаг 7: Проверить, что в репозитории нет артефактов сборки
      - name: Verify no build files in repository
        run: |
          if [ -d "build" ] || [ -f "*.o" ] || [ -f "rpn_calculator" ]; then
            echo "ERROR: Build artifacts found in repository!"
            echo "Found files:"
            find . -name "*.o" -o -name "rpn_calculator" -o -name "build" | grep -v "./.git"
            exit 1
          fi
          echo "Repository is clean - no build artifacts found"

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-test  # Запускать только после успешной сборки и тестов
    if: startsWith(github.ref, 'refs/tags/v')  # Только для тегов версий
    
    steps:
      # Шаг 1: Получить код
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Установить инструменты для сборки
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

 # Шаг 3: Собрать релизную версию
      - name: Build release version
        run: |
          make release
          # Проверяем что бинарник создан
          if [ ! -f "build/rpn_calculator" ]; then
            echo "Исполняемый файл не был создан"
            exit 1
          fi
          echo "Релизная сборка создана"

 # Шаг 4: Создать архив с релизом
      - name: Create release archive
        run: |
          # Создаем временную директорию для релиза
          mkdir -p release_package
          cp build/rpn_calculator release_package/
          cp LICENSE release_package/
          cp README.md release_package/
          cp input.txt release_package/
          
          # Создаем архив
          tar -czf rpn-calculator-${{ github.ref_name }}.tar.gz -C release_package .
          echo "Архив релиза создан: rpn-calculator-${{ github.ref_name }}.tar.gz"

      # Шаг 5: Создать релиз на GitHub
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## RPN Calculator ${{ github.ref_name }}
            
            ### Что нового?
            - Реализован калькулятор обратной польской записи
            - Поддержка базовых арифметических операций
            - Обработка ошибок и валидация выражений
            - Пакетная обработка файлов
            
            
          files: |
            rpn-calculator-${{ github.ref_name }}.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Шаг 6: Очистка после создания релиза
      - name: Cleanup after release
        run: |
          make clean
          rm -rf release_package
          rm -f rpn-calculator-*.tar.gz
        if: always()

# Отдельный job для проверки форматирования кода
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Check code formatting
        run: |
          # Проверяем форматирование всех .cpp и .hpp файлов
          find . -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run --Werror --style=Google
          echo "Форматирование кода соответствует стандарту Google"

# Разрешаем параллельное выполнение jobs

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
